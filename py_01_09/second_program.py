# Конкина Алина, ИУ7-13Б
# Программа для нахождения аксимального значения над главной диагональю и минимальное - под
# побочной диагональю.
# Входные данные прописаны в используемых фукнциях
# Выходные данные прописаны в используемых фукнциях


from default_matrix_funtions import square_float_matrix_input


def second_program():
    """
    Процедура для нахождения аксимального значения над главной диагональю и минимальное - под
    побочной диагональю.
    Параметры отсуствуют.
    Входные данные отсуствуют.
    Выходные данные: сообщение об ошибке, если порядок меньше 2, максимальный элемент над главной диагональю матрицы и
    минимальный под побочной диагональю.
    """
    # Ввод матрицы
    matrix = square_float_matrix_input()
    # Проверка на то, что возможно выполнить задание при введённой матрице
    if len(matrix) < 2:
        print('Порядок матрицы меньше 2-х. Невозможно решить задачу.')
        return
    # Берем за максимальный элемент первый элемент "сверху" над главной диагональю
    max_element = matrix[0][1]
    # Берём за минимальный элемент первый элемент "сверху" под побочной диагональю
    min_element = matrix[1][len(matrix)-1]
    # Проходим построчно по элементам матрицы
    for i in range(len(matrix)):
        # Сравниваем элементы сначала за элементом главной диагонали с максимумом
        for j in range(i+1, len(matrix)):
            if matrix[i][j] > max_element:
                max_element = matrix[i][j]
        # Сравниваем элементы за элементом побочной диагонали с минимумом
        for j in range(len(matrix)-i, len(matrix)):
            if min_element > matrix[i][j]:
                min_element = matrix[i][j]
    # Выводим соотвествующие сообщение об  максимуме и минимуме
    print(f'Максимальный элемент над главной диагональю: {max_element}')
    print(f'Минимальный элемент под побочной диагональю: {min_element}')


second_program()
