# Программу, которая позволит с использованием меню обеспечить работу со строковыми массивами
# Входные данные прописаны в используемых фукнциях
# Выходные данные прописаны в используемых фукнциях


def remove_list(list_of_elements, condition, counter):
    """
    Процедура предназначения для отчистки списка. В зависимости от параметра condition функция добавляет или не
    добавляет вводимые пользователем значения из списка.
    Параметры: list_of_elements - список, с которым работает пользователь на протяжение всей работы в программе;
    condition - условие "режима работы" процедуры. Если значение равно 1, то список будет просто отчищен, если 0, то
    пользователю будет предложенно ввести значения с клавиатуры.
    Входные данные: элементы пользовательского списка
    Выходные данные: значения текущих элементов списка перед их удалением
    """
    # Если condition равно 1
    if condition:
        # отчистка списка от значений
        list_of_elements.clear()
        return 0
    # Если condition равно 0
    else:
        # Вывод элементов текущего списка
        for i in range(counter):
            print(list_of_elements[i], end=' ')
        print()
        # Отчистка списка
        list_of_elements.clear()
        # Ввод пользовательских элементов списка
        list_of_elements.extend(list(input('Введите новый список элементов через пробел: ').split()))
        return len(list_of_elements)


def add_element(list_of_elements, counter):
    """
    Процедура для добавление элемента списка на желаемую пользователем позици.
    Параметры: list_of_elements - список, с которым работает пользователь на протяжение всей работы в программе
    Входные данные: желаемая пользователем позиция нового элемента и сам элемент
    Выходные данные: сообщение об ошибке, если позиция отрицательна, больше количества элементов списка или равна 0
    """
    # Ввод пользовательской позиции
    position = input(f'В списке {counter} элементов. Первому элементу соотвествует первая позиция в'
                     f' списке. Введите позицию, куда следует добавить элемент в списке: ')
    # Проверка кооректности позиции (сначала, что это целое число, а затем, что модуль не больше длины списка)
    if not position.isdigit() or abs(int(position)) - 1 > counter or int(position) == 0:
        print('Введенная позиция некорректна, введите вновь номер операции из меню и повторите ввод позиции.')
        return counter
    # Ввод пользовательского элемента
    element = input('Введите новый элемент: ')
    # Уменьшение позиции, так как для пользоваетля нумерация списка начинается с 1
    position = int(position)-1
    # Последний "запомнятый" элемент списка.
    last_element = None
    # Добавление элемента в список начиная с введённой позиции с постепенным сдвигом уже имеющихся на 1
    if len(list_of_elements) != position:
        for i in range(len(list_of_elements)):
            if i < position:
                continue
            if last_element:
                new_last_element = list_of_elements[i]
                list_of_elements[i] = last_element
                last_element = new_last_element
            else:
                last_element = list_of_elements[i]
                list_of_elements[i] = element
    else:
        last_element = element
    # Добавление последнего элемента
    counter += 1
    if len(list_of_elements) < counter:
        list_of_elements.append(last_element)
        return counter
    else:
        list_of_elements[counter - 1] = last_element
        return counter


def remove_element(list_of_elements, counter):
    """
    Процедура для удаления элемента из списка
    Параметры: list_of_elements - список, с которым работает пользователь на протяжение всей работы в программе
    Входные данные: пользовательская позиция, с которой необходимо удалить элемент
    Выходные данные: сообщение об ошибке, если позиция больше длины списка или меньша (равна) 0
    """
    # Ввод пользователем позиции
    position = input(
        f'В списке {len(list_of_elements)} элементов. Первому элементу соотвествует первая позиция в списке'
        f'. Введите позицию, на которой необходимо удалить элемент в списке: ')
    # Проверка кооректности позиции (сначала, что это целое число, а затем, что модуль не больше длины списка, затем 0)
    if not position.isdigit() or abs(int(position)) - 1 >= len(list_of_elements) or int(position) == 0:
        print('Введенная позиция некорректна, введите вновь номер операции из меню и повторите ввод позиции.')
        return
    # Уменьшение позиции, так как для пользоваетля нумерация списка начинается с 1
    position = int(position) - 1
    # Последний запомнятый элемент
    last_element = None
    # счётчик, так как программа работвет со списком с конца и до необходимой позиции
    i = len(list_of_elements)-1
    # Постепенной смещение элементов на 1 влево до введеённой пользователем позиции
    while i >= position:
        if last_element:
            new_last_element = list_of_elements[i]
            list_of_elements[i] = last_element
            last_element = new_last_element
        else:
            last_element = list_of_elements[i]
        i -= 1
    counter -= 1
    return counter


def find_element(list_of_elements, counter):
    """
    Поиск элемента с наибольшим числом английских согласных букв
    Параметры: list_of_elements - список, с которым работает пользователь на протяжение всей работы в программе
    Выходные данные: слово, удовлетворяющее условию, или, если такого слова нет в условии, сообщение ошибке
    """
    # Максимальное количество согласных
    max_len = 0
    # Слово с максимальным количеством согласных
    max_len_element = None
    # Перебор слов в списке
    for i in range(counter):
        # Локальное количество согласных
        local_len = 0
        # Строка, содержащая в себе согласные
        alphabet = "BCDFGHJKLMNPQRSTVWXZbcdfghjklmnpqrstvwxz"
        # Перебор символов слова и поиск количества согласных
        for symbol in list_of_elements[i]:
            if symbol in alphabet:
                local_len += 1
        # Сравнение полученного колчисетва с максимумом списка
        if max_len < local_len:
            max_len = local_len
            max_len_element = list_of_elements[i]
    # Условие вывода результата пользователю
    if max_len_element:
        print(max_len_element)
    else:
        print('Элемент, содержащий согласные буквы, отсуствает в списке.')


def change_element(list_of_elements, counter):
    """
    Замена всех заглавных гласных английских букв на строчные в элементе, позиция которого была введена пользователю
    Параметры: list_of_elements - список, с которым работает пользователь на протяжение всей работы в программе
    Входные данные: пользовательская позиция
    Выходные данные: сообщение об ошибке, если позиция больше длины списка или меньша (равна) 0, если изменение не было
    возможности произвести, то сообщение об ошибке, если возможно было, то вид нового элемента
    """
    # Ввод пользовательской позиции
    position = input(
        f'В списке {counter} элементов. Первому элементу соотвествует первая позиция в списке'
        f'. Введите позицию, на которой необходимо поменять элемент в списке: ')
    # Проверка кооректности позиции (сначала, что это целое число, а затем, что модуль не больше длины списка, затем 0)
    if not position.isdigit() or abs(int(position)) - 1 >= counter or int(position) == 0:
        print('Введенная позиция некорректна, введите вновь номер операции из меню и повторите ввод позиции.')
        return
    # Уменьшение позиции, так как для пользоваетля нумерация списка начинается с 1
    position = int(position) - 1
    # Изначальное значение элемента, интерсующего пользователя
    default_element = list_of_elements[position]
    # Строчные гласные
    little_symbols = "aeiouy"
    # Прописные гласные
    big_symbols = "AEIOUY"
    # Замена больших гласных на маленькие
    for i in range(len(big_symbols)):
        if big_symbols[i] in list_of_elements[position]:
            list_of_elements[position] = list_of_elements[position].replace(big_symbols[i], little_symbols[i])
    # Условие проверки программы на то, что были внесены в элемент изменения
    if default_element == list_of_elements[position]:
        print('Изменения не были внесены в элемент.')
    else:
        print(f'Изменения были внесены в элемент. Новый элемент: {list_of_elements[position]}')


def print_list(series_elements, counter):
    """
    Вывод текущих элементов списка.
    Парметры: список, элементы которого необходмого вывести
    Входные данные отсуствуют
    Выходные данные: элементы списка или сообщение, что списко пуст
    """
    if not counter:
        print('Элементы в списке отсуствуют!')
        return
    for i in range(counter):
        print(series_elements[i], end=' ')
    print()


def main():
    """
    Функция для работы с меню программы.
    Параметры отсуствуют.
    Входные данные: необходимая команда пользователя
    Выходные данные: приветсвие, меню программы, сообщение об ошибке, если команда нерентабельна.
    """
    # Приветствие
    print("Здравствуйте!")
    # Строка для меню программы и инструкции для работы с ним
    menu_string = ('Работа с меню ведется через ввод чисел от 0 до 8 включительно в соотвествии с пунктами меню.\n'
                   'Меню:\n'
                   '0 - Вывести меню\n'
                   '1 - Очистить список и ввести его с клавиатуры\n'
                   '2 - Добавить элемент в произвольное место списка\n'
                   '3 - Удалить произвольный элемент из списка (по номеру)\n'
                   '4 - Очистить список\n'
                   '5 - Поиск элемента с наибольшим числом английских согласных букв\n'
                   '6 - Изменение всех заглавных гласных английских букв на строчные элемента\n'
                   '7 - Вывод элементов списка\n'
                   '8 - Завершить работу программы\n')
    # Первый вывод меню программы
    print(menu_string)
    # Список для работы
    series_elements = []
    # Считает текущее количество элементов в списке
    counter = 0
    # Программа будет работать, пока пользователь не введет 8 команду (там стоит break для цикла)
    while True:
        # Строка ввода команды
        command = input('Введите необходимую команду для работы со списком или 0 для вывода меню: ')
        # Проверка на соотвествие команды пункту меню
        if not command.isdigit() or int(command) > 8:
            print('Команда введена неверно!', end=' ')
            print(menu_string)
            continue
        # Приведение команды к целочисленному типу и выбор пункта меню
        command = int(command)
        if command == 0:
            # Вывод меню в терминал
            print(menu_string)
        elif command == 1:
            # Очистка списока и ввод его с клавиатуры
            counter = remove_list(series_elements, 0, counter)
        elif command == 2:
            # Добавить элемент в произвольное место списка
            counter = add_element(series_elements, counter)
        elif command == 3:
            # Удалить произвольный элемент из списка (по номеру)
            counter = remove_element(series_elements, counter)
        elif command == 4:
            # Очистить список
            counter = remove_list(series_elements, 1, counter)
        elif command == 5:
            # Найти значение K-го экстремума в списке
            find_element(series_elements, counter)
        elif command == 6:
            # Поиск элемента по варианту 2
            change_element(series_elements, counter)
        elif command == 7:
            # Вывод элементов списка
            print_list(series_elements, counter)
        elif command == 8:
            # Изменение элемента по варианту 4
            break


main()
