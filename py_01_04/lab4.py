# Конкина Алина, ИУ7-13Б, вариант 12
# Программа предназначена для вычисления значений 3-х функций и вывода графика второй.
# Входные данные: начальное значение, шаг, конечное значение и количество засечек
# Выходные данные: таблица с соответствующими значениями функций и график второй из них

# Ввод данных
# Начальное значение аргумента
x0 = float(input('Введите начальное значение: '))
# Шаг
h = float(input('Введите шаг: '))
# Конечное значение аргумента
xn = float(input('Введите конечное значение: '))

# Обработка входных данных и  вывод результата
# Переменная для хранения аргумента при работе с цункциями
x = x0
# Эпсилон в случае погрешности вычислений
epsilon = 10**-8
# Вывод "шапки" таблицы
print('|' + ('-'*20 + '|')+('-'*21 + '|')*3)
print('|'+'-'*10+'x'+'-'*9 + '|'+'-'*10+'g1'+'-'*9 + '|'+'-'*10+'g2'+'-'*9 + '|'+'-'*10+'g3'+'-'*9 + '|')
print('|' + ('-'*20 + '|')+('-'*21 + '|')*3)
# Количество х, окторые необходимо будет вывести на основе шага
count = int((xn-x0)/h)+1
# Количество значений меньше 0 для второй функции (дополнительное задание)
count_g2_less_zero = 0
# Переменные, необходимые для нахождения максимума функции
max_g2 = x0 ** 3 - x0 - 1
max_x = x
# Переменные, необходимые для нахождения минимума функции
min_g2 = max_g2
min_x = x
for i in range(count):
    g2 = x ** 3 - x - 1
    # Условия для нахождения минимального из значений g2
    if min_g2 > g2:
        min_g2 = g2
        min_x = x
    # Условия для нахождения максимального из значений g2
    if max_g2 < g2:
        max_g2 = g2
        max_x = x
    # Подсчёт количества значений g2, меньших нуля
    if g2 < -epsilon:
        count_g2_less_zero += 1
    # Интерпретатор выдает ошибку при подсчёте занчений в первой и третьей функции, если аргумент больше 140.
    # Причина - значения сликшом большие. Поэтому в таком случае программа будет выводить 'inf' в терминал, если
    # аргумент функции g1 и g3 больше 140.
    if abs(x) <= 140:
        g1 = x**x+2*x-6
        # Проверка, является ли число комплексным. Если да, то выводит None
        if isinstance(g1, complex):
            g3 = '{:^21}'.format('None')
            g1 = '{:^21}'.format('None')
        else:
            g3 = '{:^21.7g}'.format(abs(g1*g2) ** 0.5)
            g1 = '{:^21.7g}'.format(g1)
    else:
        g1 = '{:^21}'.format('inf')
        g3 = '{:^21}'.format('inf')
    g2 = '{:^21.7g}'.format(g2)
    # Вывод подготовленной строки
    print('|' + '{:^20.7g}'.format(round(x, 7)) + '|' + g1 + '|' + g2 + '|' + g3+'|')
    # Увеличение аргумента на шаг
    x += h
# Вывод конца таблицы значение
print('|' + ('-'*20 + '|')+('-'*21 + '|')*3, end='\n\n')
print()

# Построение графика функции g2
# Ввод количества засечек на оси ординат
serif_count = int(input('Введите целое количество засечек от 4 до 8: '))
if serif_count > 8 or serif_count < 4:
    # Согласно условию задачи, количество зачесек должно быть от 4 до 8, поэтому в случае, если пользователь введ
    # иное значение, то программа выведет в терминал сообщение об ошибке, а не график функции
    print('Условие ввода не соблюдено')
else:
    # Предполагаемая ширина графика функции
    table_width = 200
    # Расстояние между засечками
    delta = table_width//serif_count-20
    # Фактическая ширина графика функции
    table_width = 20*serif_count + delta*serif_count
    # Прирастание значений функции для оси ординат
    sefif_h_1 = (max_g2 - min_g2)/(serif_count-1)
    # Прирастание значений функции для одной ячейки на графике функции
    sefif_h_2 = (max_g2 - min_g2)/table_width
    # Вывод оси ординат
    print(' ' * 20 + '|' + ' '*delta+'{:^20.7g}'.format(min_g2), end='')
    # Ведение вспомогательной переменной для вывода оси ординат
    min_g2_1 = min_g2
    for i in range(serif_count-1):
        min_g2_1 += sefif_h_1
        print(' '*delta + '{:^20.7g}'.format(min_g2_1), end='')
    print()
    # Изначальное значение аргумента
    x = x0
    # Построчный вывод графика функции
    for i in range(count):
        print('{:^20.7g}'.format(round(x, 7))+'|', end='')
        # Значение графика функции в данной точке
        g2 = x ** 3 - x - 1
        for j in range(0, table_width):
            # Сравнение с границами ячейки
            if min_g2+sefif_h_2*j <= g2 < min_g2+sefif_h_2*(j+1):
                print('*', end='')
            # Значение не находится в данной ячейке, сравниваю границы с нулём для вывода оси абцисс
            elif min_g2+sefif_h_2*j <= 0 < min_g2+sefif_h_2*(j+1):
                print('|', end='')
            # Ни одно из значений не подошло, выводится пробел
            else:
                print(' ', end='')
        print()
        x += h

print()
# Вывод ответа на вопрос дополнительного задания
print('Количество отрицательных значений функции g2 =', count_g2_less_zero)




